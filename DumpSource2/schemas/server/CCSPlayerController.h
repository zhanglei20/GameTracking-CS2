class CCSPlayerController : public CBasePlayerController
{
	CCSPlayerController_InGameMoneyServices* m_pInGameMoneyServices;
	CCSPlayerController_InventoryServices* m_pInventoryServices;
	CCSPlayerController_ActionTrackingServices* m_pActionTrackingServices;
	CCSPlayerController_DamageServices* m_pDamageServices;
	uint32 m_iPing;
	bool m_bHasCommunicationAbuseMute;
	CUtlSymbolLarge m_szCrosshairCodes;
	uint8 m_iPendingTeamNum;
	GameTime_t m_flForceTeamTime;
	int32 m_iCompTeammateColor;
	bool m_bEverPlayedOnTeam;
	bool m_bAttemptedToGetColor;
	int32 m_iTeammatePreferredColor;
	bool m_bTeamChanged;
	bool m_bInSwitchTeam;
	bool m_bHasSeenJoinGame;
	bool m_bJustBecameSpectator;
	bool m_bSwitchTeamsOnNextRoundReset;
	bool m_bRemoveAllItemsOnNextRoundReset;
	CUtlSymbolLarge m_szClan;
	char[32] m_szClanName;
	int32 m_iCoachingTeam;
	uint64 m_nPlayerDominated;
	uint64 m_nPlayerDominatingMe;
	int32 m_iCompetitiveRanking;
	int32 m_iCompetitiveWins;
	int8 m_iCompetitiveRankType;
	int32 m_iCompetitiveRankingPredicted_Win;
	int32 m_iCompetitiveRankingPredicted_Loss;
	int32 m_iCompetitiveRankingPredicted_Tie;
	int32 m_nEndMatchNextMapVote;
	uint16 m_unActiveQuestId;
	QuestProgress::Reason m_nQuestProgressReason;
	uint32 m_unPlayerTvControlFlags;
	int32 m_iDraftIndex;
	uint32 m_msQueuedModeDisconnectionTimestamp;
	uint32 m_uiAbandonRecordedReason;
	bool m_bCannotBeKicked;
	bool m_bEverFullyConnected;
	bool m_bAbandonAllowsSurrender;
	bool m_bAbandonOffersInstantSurrender;
	bool m_bDisconnection1MinWarningPrinted;
	bool m_bScoreReported;
	int32 m_nDisconnectionTick;
	bool m_bControllingBot;
	bool m_bHasControlledBotThisRound;
	bool m_bHasBeenControlledByPlayerThisRound;
	int32 m_nBotsControlledThisRound;
	bool m_bCanControlObservedBot;
	CHandle< CCSPlayerPawn > m_hPlayerPawn;
	CHandle< CCSObserverPawn > m_hObserverPawn;
	int32 m_DesiredObserverMode;
	CEntityHandle m_hDesiredObserverTarget;
	bool m_bPawnIsAlive;
	uint32 m_iPawnHealth;
	int32 m_iPawnArmor;
	bool m_bPawnHasDefuser;
	bool m_bPawnHasHelmet;
	uint16 m_nPawnCharacterDefIndex;
	int32 m_iPawnLifetimeStart;
	int32 m_iPawnLifetimeEnd;
	int32 m_iPawnBotDifficulty;
	CHandle< CCSPlayerController > m_hOriginalControllerOfCurrentPawn;
	int32 m_iScore;
	int32 m_iRoundScore;
	int32 m_iRoundsWon;
	CNetworkUtlVectorBase< EKillTypes_t > m_vecKills;
	bool m_bMvpNoMusic;
	int32 m_eMvpReason;
	int32 m_iMusicKitID;
	int32 m_iMusicKitMVPs;
	int32 m_iMVPs;
	int32 m_nUpdateCounter;
	float32 m_flSmoothedPing;
	IntervalTimer m_lastHeldVoteTimer;
	bool m_bShowHints;
	int32 m_iNextTimeCheck;
	bool m_bJustDidTeamKill;
	bool m_bPunishForTeamKill;
	bool m_bGaveTeamDamageWarning;
	bool m_bGaveTeamDamageWarningThisRound;
	float64 m_dblLastReceivedPacketPlatFloatTime;
	GameTime_t m_LastTeamDamageWarningTime;
	GameTime_t m_LastTimePlayerWasDisconnectedForPawnsRemove;
	uint32 m_nSuspiciousHitCount;
	uint32 m_nNonSuspiciousHitStreak;
};
