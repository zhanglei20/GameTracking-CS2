class CSceneEntity : public CPointEntity
{
	CUtlSymbolLarge m_iszSceneFile;
	CUtlSymbolLarge m_iszResumeSceneFile;
	CUtlSymbolLarge m_iszTarget1;
	CUtlSymbolLarge m_iszTarget2;
	CUtlSymbolLarge m_iszTarget3;
	CUtlSymbolLarge m_iszTarget4;
	CUtlSymbolLarge m_iszTarget5;
	CUtlSymbolLarge m_iszTarget6;
	CUtlSymbolLarge m_iszTarget7;
	CUtlSymbolLarge m_iszTarget8;
	CHandle< CBaseEntity > m_hTarget1;
	CHandle< CBaseEntity > m_hTarget2;
	CHandle< CBaseEntity > m_hTarget3;
	CHandle< CBaseEntity > m_hTarget4;
	CHandle< CBaseEntity > m_hTarget5;
	CHandle< CBaseEntity > m_hTarget6;
	CHandle< CBaseEntity > m_hTarget7;
	CHandle< CBaseEntity > m_hTarget8;
	CUtlSymbolLarge m_sTargetAttachment;
	bool m_bIsPlayingBack;
	bool m_bPaused;
	bool m_bMultiplayer;
	bool m_bAutogenerated;
	float32 m_flForceClientTime;
	float32 m_flCurrentTime;
	float32 m_flFrameTime;
	bool m_bCancelAtNextInterrupt;
	float32 m_fPitch;
	bool m_bAutomated;
	int32 m_nAutomatedAction;
	float32 m_flAutomationDelay;
	float32 m_flAutomationTime;
	CHandle< CBaseEntity > m_hWaitingForThisResumeScene;
	bool m_bWaitingForResumeScene;
	bool m_bPausedViaInput;
	bool m_bPauseAtNextInterrupt;
	bool m_bWaitingForActor;
	bool m_bWaitingForInterrupt;
	bool m_bInterruptedActorsScenes;
	bool m_bBreakOnNonIdle;
	bool m_bSceneFinished;
	CNetworkUtlVectorBase< CHandle< CBaseFlex > > m_hActorList;
	CUtlVector< CHandle< CBaseEntity > > m_hRemoveActorList;
	int32 m_nSceneFlushCounter;
	uint16 m_nSceneStringIndex;
	CEntityIOOutput m_OnStart;
	CEntityIOOutput m_OnCompletion;
	CEntityIOOutput m_OnCanceled;
	CEntityIOOutput m_OnPaused;
	CEntityIOOutput m_OnResumed;
	CEntityIOOutput[16] m_OnTrigger;
	CHandle< CSceneEntity > m_hInterruptScene;
	int32 m_nInterruptCount;
	bool m_bSceneMissing;
	bool m_bInterrupted;
	bool m_bCompletedEarly;
	bool m_bInterruptSceneFinished;
	bool m_bRestoring;
	CUtlVector< CHandle< CSceneEntity > > m_hNotifySceneCompletion;
	CUtlVector< CHandle< CSceneListManager > > m_hListManagers;
	CUtlSymbolLarge m_iszSoundName;
	CUtlSymbolLarge m_iszSequenceName;
	CHandle< CBaseFlex > m_hActor;
	CHandle< CBaseEntity > m_hActivator;
	int32 m_BusyActor;
	SceneOnPlayerDeath_t m_iPlayerDeathBehavior;
};
